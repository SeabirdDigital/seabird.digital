---
import Layout from "../lib/Layout.astro";
---

<script>
    import anime from "animejs";

    const grid = document.getElementById("grid") || new HTMLDivElement();

    let cols: number = Math.floor(grid.clientHeight / 100),
        rows: number = Math.floor(grid.clientHeight / 100);

    const createTile = () => {
        const tile = document.createElement("div");
        tile.classList.add("tile");

        return tile;
    };

    const createTiles = (quantity: number) => {
        Array.from(Array(quantity)).map((_, index: number) => {
            grid.appendChild(createTile());
        });
    };

    const createGrid = () => {
        grid.innerHTML = "";

        cols = Math.floor(grid.clientWidth / 100); //
        rows = Math.floor(grid.clientHeight / 100);
        console.log(grid.clientHeight);

        grid.style.setProperty("--cols", cols.toString());
        grid.style.setProperty("--rows", rows.toString());

        createTiles(cols * rows);
    };

    createGrid();
    window.onresize = () => createGrid();

    anime({
        targets: "#content span",
        translateY: -100,
        delay: anime.stagger(250),
        opacity: 1,
        duration: 1000,
        easing: "easeInOutSine",
    });
</script>

<Layout overlayHeader={true}>
    <div id="hero">
        <div id="overlay"></div>
        <div id="grid"></div>
        <div id="content">
            <h1><span>En något</span><span>annorlunda digitalbyrå</span></h1>
        </div>
    </div>
    <div class="h-screen w-full bg-[rgb(15,15,15)]"></div>
</Layout>

<style>
    @keyframes background-pan {
        from {
            background-position: center 0%;
        }
        to {
            background-position: center 200%;
        }
    }

    #hero {
        height: 100vh;
        width: 100%;
        position: relative;

        display: flex;
        justify-content: center;
        align-items: center;

        overflow: hidden;
        animation: background-pan 7s linear infinite;
        background: linear-gradient(
            to bottom,
            var(--sb-purple),
            var(--sb-blue),
            var(--sb-pink),
            var(--sb-purple)
        );
        background-size: 100% 200%;
    }

    #content {
        color: white;
        position: relative;
        text-align: center;
        margin-bottom: 5rem;

        z-index: 5;
        pointer-events: none;
    }

    #content h1 {
        font-family: var(--sb-darker);
        font-weight: 700;
        font-size: 4rem;
        line-height: 3.75rem;

        display: flex;
        flex-direction: column;
    }

    #content h1 span {
        translate: 0 100px;
        opacity: 0;
    }

    #grid {
        height: 100%;
        width: 100%;

        position: absolute;
        top: 0;
        left: 0;
        display: grid;
        grid-template-columns: repeat(var(--cols), 1fr);
        grid-template-rows: repeat(var(--rows), 1fr);

        transition-duration: 200ms;

        z-index: 1;
    }

    #overlay {
        height: 100vh;
        width: 100%;

        position: absolute;
        top: 0;
        left: 0;

        background: linear-gradient(
                to bottom,
                rgba(0, 0, 0, 0),
                rgb(15, 15, 15)
            ),
            radial-gradient(at center top, rgba(0, 0, 0, 0), rgb(15, 15, 15));

        transition: opacity 500ms;
        pointer-events: none;

        z-index: 2;
    }

    #grid :global(.tile) {
        position: relative;
    }

    #grid :global(.tile)::before {
        content: "";

        background-color: rgb(15, 15, 15);
        position: absolute;
        inset: 0.5px;
    }

    #grid :global(.tile):hover::before {
        background-color: rgb(20, 20, 20);
    }
</style>
