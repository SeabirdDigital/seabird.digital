---
import Layout from "../lib/Layout.astro";
---

<script>
    import anime from "animejs";

    let size: number = document.body.clientWidth > 800 ? 100 : 50,
        cols: number = Math.floor(document.body.clientHeight / size), 
        rows: number = Math.floor(document.body.clientHeight / size),
        
        toggled: boolean = true;

    const grid = document.getElementById("grid") || new HTMLDivElement();

    const onClickOnTile = (index: number) => {
        toggled = !toggled;

        if (toggled) {
            grid.classList.add("toggled")
        }
        else {
            grid.classList.remove("toggled")
        };

        anime({
            targets: ".tile",
            opacity: toggled ? 1 : 0,
            delay: anime.stagger(50, {
                grid: [cols, rows],
                from: index,
            })
        });
        anime({
            targets: "#overlay",
            opacity: toggled ? 1 : 0,
            duration: 50000
        });
    };

    const createTile = (index: number) => {
        const tile = document.createElement("div");
        tile.classList.add("tile");
        tile.onclick = () => onClickOnTile(index);

        return tile;
    };

    const createTiles = (quantity: number) => {
        Array.from(Array(quantity)).map(
            (tile: HTMLDivElement, index: number) => {
                grid.appendChild(createTile(index));
            }
        );
    };

    const createGrid = () => {
        grid.innerHTML = "";

        size = document.body.clientWidth > 800 ? 100 : 50;
        cols = Math.floor(document.body.clientWidth / size);
        rows = Math.floor(document.body.clientHeight / size);

        grid.style.setProperty("--cols", cols.toString());
        grid.style.setProperty("--rows", rows.toString());

        if (toggled) {
            grid.classList.add("toggled")
        }
        else {
            grid.classList.remove("toggled")
        }

        createTiles(cols * rows);
    };

    createGrid();
    window.onresize = () => createGrid();
</script>

<Layout overlayHeader={true}>
    <div id="hero">
        <div id="overlay"></div>
        <div id="grid">
        </div>
    </div>
</Layout>

<style>
    
        @keyframes background-pan {
            from {
                background-position: 0% center;
            }
            to {
                background-position: -200% center;
            }
        }

    #hero {
        height: 100vh;
        width: 100vw;

        overflow: hidden;
        animation: background-pan 10s linear infinite;
        background: linear-gradient(
            to right,
            var(--sb-pink),
            var(--sb-blue),
            var(--sb-pink)
        );
        background-size: 200%;
    }

    #grid {
        height: 100%;
        width: 100%;

        position: relative;
        display: grid;
        grid-template-columns: repeat(var(--cols), 1fr);
        grid-template-rows: repeat(var(--rows), 1fr);

        transition-duration: 200ms;
    }

    #overlay {
        height: 100vh;
        width: 100vw;
        position: absolute;

        background: linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0),
            rgb(15, 15, 15)
        );
    }

    #grid :global(.tile) {
        position: relative;
        cursor: pointer;
    }

    #grid:not(.toggled) :global(.tile:hover) {
        opacity: 0.1 !important;
    }

    #grid :global(.tile)::before {
        content: "";

        background-color: rgb(15, 15, 15);
        position: absolute;
        inset: 0.5px;
    }

    #grid :global(.tile):hover::before {
        background-color: rgb(30, 30, 30);
    }
</style>
